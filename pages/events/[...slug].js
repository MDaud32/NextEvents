import { useState, useEffect } from 'react';
import { Text, Box } from '@chakra-ui/react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { getFilteredEvents } from '../../components/halper/api-util';

import EventsList from '../../components/events/event-list';
import ResultTitle from '../../components/events/result-page';
import UsableButton from '../../lib/button';
import useSWR from 'swr';

export default function FilteredEvents(props) {
  const [loadedEvents, setLoadedEvents] = useState();

  const router = useRouter();

  const filterData = router.query.slug;
  const { data, error } = useSWR(
    'https://nextjs-events-28c94-default-rtdb.firebaseio.com/events.json'
  );

  useEffect(() => {
    if (data) {
      const events = [];
      for (const key in data) {
        eventFormate.push({
          id: key,
          ...data[key],
        });
      }
      setLoadedEvents(events);
    }
  }, [data]);

  if (!filterData) {
    return <Text>Loading...</Text>;
  }

  const filteredYear = filterData[0];
  const filteredMonth = filterData[1];

  const numYear = +filteredYear;
  const numMonth = +filteredMonth;
  if (
    isNaN(numYear) ||
    isNaN(numMonth) ||
    numYear > 2030 ||
    numYear < 2021 ||
    numMonth < 1 ||
    numMonth > 12 ||
    error
  ) {
    return (
      <Box
        display={'grid'}
        flexDirection={'column'}
        justifyItems={'center'}
        textAlign={'center'}
        py={'8'}
        gap={'4'}
      >
        <Text
          p={'6'}
          bg={'red.300'}
          rounded='lg'
          fontWeight={'semibold'}
          fontSize={'2xl'}
        >
          Invalid filter. please adjust your value!
        </Text>
        <Box
          fontSize={'lg'}
          fontWeight={700}
          rounded={'full'}
          bg={'green.400'}
          color={'gray.800'}
          transform={'auto'}
          px='4'
          py='3'
          boxShadow={
            '0px 1px 25px -5px rgb(66 153 225 / 48%), 0 10px 10px -5px rgb(66 153 225 / 43%)'
          }
          _hover={{
            bg: 'green.600',
            translateY: '1',
            color: 'gray.200',
          }}
          _focus={{
            bg: 'green.600',
          }}
          className='whitespace-nowrap'
        >
          <UsableButton link='/events'>Show All Events</UsableButton>
        </Box>
      </Box>
    );
  }

  const filteredEvents = loadedEvents.filtere((event) => {
    const eventDate = new Date(event.date);
    return (
      eventDate.getFullYear() === numYear &&
      eventDate.getMonth() === numMonth - 1
    );
  });

  if (!filteredEvents || filteredEvents.length === 0) {
    return (
      <Box
        display={'grid'}
        flexDirection={'column'}
        justifyItems={'center'}
        textAlign={'center'}
        py={'8'}
        gap={'4'}
      >
        <Text
          p={'6'}
          bg={'red.300'}
          rounded='lg'
          fontWeight={'semibold'}
          fontSize={'2xl'}
        >
          No events found for the chosen filter!
        </Text>
        <Box
          fontSize={'lg'}
          fontWeight={700}
          rounded={'full'}
          bg={'green.400'}
          color={'gray.800'}
          transform={'auto'}
          px='4'
          py='3'
          boxShadow={
            '0px 1px 25px -5px rgb(66 153 225 / 48%), 0 10px 10px -5px rgb(66 153 225 / 43%)'
          }
          _hover={{
            bg: 'green.600',
            translateY: '1',
            color: 'gray.200',
          }}
          _focus={{
            bg: 'green.600',
          }}
          className='whitespace-nowrap'
        >
          <UsableButton link='/events'>Show All Events</UsableButton>
        </Box>
      </Box>
    );
  }
  const date = new Date(numYear, numMonth - 1);
  return (
    <div>
      <Head>
        <title>Single Post</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <ResultTitle date={date} />
      <EventsList items={filteredEvents} />
    </div>
  );
}

// export const getServerSideProps = async (context) => {
//   const { params } = context;
//   const filterData = params.slug;
//   const filteredYear = filterData[0];
//   const filteredMonth = filterData[1];

//   const numYear = +filteredYear;
//   const numMonth = +filteredMonth;
//   if (
//     isNaN(numYear) ||
//     isNaN(numMonth) ||
//     numYear > 2030 ||
//     numYear < 2021 ||
//     numMonth < 1 ||
//     numMonth > 12
//   ) {
//     return {
//       props: { hasError: true },
//       // notFound: true,
//     };
//   }

//   const filteredEvents = await getFilteredEvents({
//     year: numYear,
//     month: numMonth,
//   });
//   return {
//     props: {
//       events: filteredEvents,
//       date: {
//         year: numYear,
//         month: numMonth,
//       },
//     },
//   };
// };
